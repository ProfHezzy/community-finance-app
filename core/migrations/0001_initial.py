# Generated by Django 5.2.3 on 2025-06-17 09:39

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+2341234567890'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.')),
                ('is_suspended', models.BooleanField(default=False, help_text="Designates whether the user's account has been suspended.")),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Custom User',
                'verbose_name_plural': 'Custom Users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_admin', models.BooleanField(default=False, help_text='Does this member have admin privileges in the group?')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Group Membership',
                'verbose_name_plural': 'Group Memberships',
                'ordering': ['date_joined'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalUserProfile',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('bvn', models.CharField(blank=True, db_index=True, help_text='Bank Verification Number (11 digits)', max_length=11, null=True, validators=[django.core.validators.RegexValidator('^\\d{11}$', 'BVN must be 11 digits.')])),
                ('nin', models.CharField(blank=True, db_index=True, help_text='National Identity Number (11 digits)', max_length=11, null=True, validators=[django.core.validators.RegexValidator('^\\d{11}$', 'NIN must be 11 digits.')], verbose_name='National Identity Number (NIN)')),
                ('address', models.TextField(blank=True, max_length=500, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('lga', models.CharField(blank=True, max_length=100, null=True, verbose_name='Local Government Area')),
                ('country', models.CharField(default='Nigeria', max_length=100)),
                ('account_type', models.CharField(choices=[('individual', 'Individual'), ('group', 'Group')], default='individual', help_text='Type of account: Individual or Group/Cooperative', max_length=15)),
                ('preferred_currency', models.CharField(choices=[('NGN', 'Naira'), ('USD', 'Dollar')], default='NGN', max_length=3)),
                ('profile_picture', models.TextField(blank=True, max_length=100, null=True)),
                ('is_kyc_verified', models.BooleanField(default=False, help_text="Indicates if the user's KYC documents have been verified.")),
                ('kyc_submitted_at', models.DateTimeField(blank=True, null=True)),
                ('kyc_approved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical User Profile',
                'verbose_name_plural': 'historical User Profiles',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='SavingsGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('contribution_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('contribution_frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly')], help_text="How often contributions are made (e.g., 'weekly')", max_length=10)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, help_text='Optional end date for the group', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is the group currently active?')),
                ('is_private', models.BooleanField(default=False, help_text='Is this a private group (requires invitation)?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_groups', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(related_name='savings_groups', through='core.GroupMembership', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Savings Group',
                'verbose_name_plural': 'Savings Groups',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='groupmembership',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.savingsgroup'),
        ),
        migrations.AlterUniqueTogether(
            name='groupmembership',
            unique_together={('user', 'group')},
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('transaction_type', models.CharField(choices=[('contribution', 'Contribution'), ('payout', 'Payout'), ('loan', 'Loan Disbursement'), ('repayment', 'Loan Repayment'), ('deposit', 'Wallet Deposit'), ('withdrawal', 'Wallet Withdrawal'), ('fee', 'Fee')], max_length=20)),
                ('reference', models.CharField(help_text='Unique transaction reference ID', max_length=50, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('failed', 'Failed'), ('reversed', 'Reversed')], default='pending', max_length=20)),
                ('description', models.TextField(blank=True, help_text='Optional description for the transaction')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('group', models.ForeignKey(blank=True, help_text='The group associated with the transaction (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.savingsgroup')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Transaction',
                'verbose_name_plural': 'Transactions',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['user', 'timestamp'], name='core_transa_user_id_349bc6_idx'), models.Index(fields=['reference'], name='core_transa_referen_61d5aa_idx')],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('bvn', models.CharField(blank=True, help_text='Bank Verification Number (11 digits)', max_length=11, null=True, unique=True, validators=[django.core.validators.RegexValidator('^\\d{11}$', 'BVN must be 11 digits.')])),
                ('nin', models.CharField(blank=True, help_text='National Identity Number (11 digits)', max_length=11, null=True, unique=True, validators=[django.core.validators.RegexValidator('^\\d{11}$', 'NIN must be 11 digits.')], verbose_name='National Identity Number (NIN)')),
                ('address', models.TextField(blank=True, max_length=500, null=True)),
                ('city', models.CharField(blank=True, max_length=100, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('lga', models.CharField(blank=True, max_length=100, null=True, verbose_name='Local Government Area')),
                ('country', models.CharField(default='Nigeria', max_length=100)),
                ('account_type', models.CharField(choices=[('individual', 'Individual'), ('group', 'Group')], default='individual', help_text='Type of account: Individual or Group/Cooperative', max_length=15)),
                ('preferred_currency', models.CharField(choices=[('NGN', 'Naira'), ('USD', 'Dollar')], default='NGN', max_length=3)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('is_kyc_verified', models.BooleanField(default=False, help_text="Indicates if the user's KYC documents have been verified.")),
                ('kyc_submitted_at', models.DateTimeField(blank=True, null=True)),
                ('kyc_approved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'indexes': [models.Index(fields=['bvn'], name='core_userpr_bvn_c6dc5b_idx'), models.Index(fields=['nin'], name='core_userpr_nin_dd083e_idx')],
            },
        ),
    ]
